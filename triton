#!/bin/bash
#
#=== this is the triton command line AI
#=== created by: 
#===			Kenneth Allwine II	-	
#===			Anthony Neumayer	-
#===			David Cornell		-
#===			Joseph Hoffmann		-	
#
#
#todo:		
#			change the .ssh persist setting to allow for all of the ssh magic of install to work
#			add the ability to create a host name pairing so that installed nodes can have nicknames 
#			add the ability to ssh and connect to a node with a name
#			check to see if nodelist and filelist exist, create them if they dont
#

#===config
config() {
	echo "this is config"
} #end of config 

#===help
help() {
	echo "this is the help"
} #end of help

#===install
install() {
				#add a value to nodelist
				echo "${1}" >> ~/.triton/nodelist	
		
				#copy over RSA public key
				scp ~/.ssh/id_rsa.pub $1:~
				#cat the RSA public key to the authorized_keys file in the ~/.ssh/ folder
				ssh $1 'mkdir -p ~/.ssh; touch ~/.ssh/authorized_keys; cat ~/id_rsa.pub >> ~/.ssh/authorized_keys; rm ~/id_rsa.pub; mkdir -p ~/.triton; mkdir -p ~/.vim/colors'
				#scp over the triton script
				scp triton $1:~

				#now transfer over the dot files from the filelist by calling upgrade
				upgrade $1

} #end of install

#===upgrade
upgrade(){
				while read vars 
					do 
						echo "transfering " $vars 
						CMD="scp ${vars} ${1}:${vars}"
						eval $CMD	
					done<~/.triton/filelist

} #end of upgrade function

#===usage
usage() {
	echo -e "*triton usage*"
	echo -e " HELP"
	echo -e "  help or h"
	echo -e " INSTALL"
	echo -e "  install or i 'hostname or ip'"
	echo -e " INSTALL WITH KEY"
	echo -e "  key-install or ki 'hostname or ip' 'key file'"

} #end of usag

#===read the .tritonrc file
readRC(){
	while read vars 
		do 
			echo $vars | awk '{ print $1 $2 }' 
		done<.triton/tritonrc
} # end of reading .tritonrc file


#===handle the action from the user input
#action=$( printf "%s\n" "$ACTION" | tr 'A-Z' 'a-z' )
action=$1
value=$2

#===case statement to handle the input
case $action in

#===config
	"config" | "c")
		config	
	;;

#===display the help
	"help" | "h")
		help
	;;

#===install a new node
	"install" | "i")
		#add a value to the nodelist so we know where triton is installed - check to see if it already exists
		if grep -Fxq "$value" ~/.triton/nodelist
			then
				echo "already installed, do an upgrade instead"
			else
				echo -n "installing on" $value
				install $value
					
		fi # done with the else we havent installed here yet

	;;

#===install a new node using a ssh key
#change this function to match the install
	"key-install" | "ki")
		echo -n "installing on" $value
		#copy over RSA public key using a pem key 
		scp -i $3 ~/.ssh/id_rsa.pub $value:~
		#cat the RSA public key to the authorized_keys file in the ~/.ssh/ folder also make a .triton file for config files
		ssh -i $3 $value 'mkdir -p ~/.ssh; touch ~/.ssh/authorized_keys; cat ~/id_rsa.pub >> ~/.ssh/authorized_keys; rm ~/id_rsa.pub; mkdir -p ~/.triton'
		#now transfer over the dot files from the filelist

	;;

#===testing file transfer
	"test_file")
		echo "*this is for testing reading the file list*"
		while read vars 
			do 
				echo "transfering " $vars 
				CMD="scp ${vars} ${value}:${vars}"
				eval $CMD	
			done<.triton/filelist

	;;

#===testing adding nodes
	"test_node")
		echo "*this is for testing adding nodes*"
		cat '`$3` `$4`' >> ~/.triton/nodelist

	;;

#===upgrade
	"upgrade" | "u")
		if [ -z "$value" ] 	
		then
			while read node 
				do 
					echo "updating " $node
					upgrade $node
			done<.triton/nodelist
		else
			echo "updating " $value
			upgrade $value
		fi
	;;

#===catch all

	*)
		usage
	;;

esac # done with the case statement

